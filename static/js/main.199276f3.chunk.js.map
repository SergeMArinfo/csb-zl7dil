{"version":3,"sources":["templates-panel.js","index.js"],"names":["TemplatesSection","name","Tab","props","react_default","a","createElement","side_panel","Object","assign","MdPhotoLibrary_default","Panel","observer","_ref","store","_useInfiniteAPI","useInfiniteAPI","getAPI","_ref2","page","concat","data","isLoading","style","height","images_grid","shadowEnabled","images","map","items","flat","getPreview","item","preview","onSelect","_ref3","asyncToGenerator","regenerator_default","mark","_callee","req","json","wrap","_context","prev","next","fetch","sent","loadJSON","stop","_x","apply","this","arguments","rowsNumber","createStore","key","showCredit","addPage","sections","toConsumableArray","DEFAULT_SECTIONS","App","polotno_app","defaultSection","toolbar","downloadButtonEnabled","workspace","zoom_buttons","ReactDOM","render","src_App","document","getElementById"],"mappings":"qUAoCaA,EAAmB,CAC9BC,KAAM,mBACNC,IAAK,SAACC,GAAD,OACHC,EAAAC,EAAAC,cAACC,EAAA,WAADC,OAAAC,OAAA,CAAYR,KAAK,oBAAuBE,GACtCC,EAAAC,EAAAC,cAACI,EAAAL,EAAD,QAIJM,MAnC4BC,mBAAS,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAExCC,EAA4BC,yBAAe,CACzCC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,uBAAAC,OAA+BD,EAA/B,YADFE,EAARN,EAAQM,KAAMC,EAAdP,EAAcO,UAId,OACElB,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAAEC,OAAQ,SACpBpB,EAAAC,EAAAC,cAACmB,EAAA,WAAD,CACEC,eAAe,EACfC,OAAM,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAMO,IAAI,SAACP,GAAD,OAAUA,EAAKQ,QAAOC,OACxCC,WAAY,SAACC,GAAD,oBAAAZ,OAAwBY,EAAKC,UACzCX,UAAWA,EACXY,SAAQ,eAAAC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAAhC,EAAAiC,KAAE,SAAAC,EAAOP,GAAP,IAAAQ,EAAAC,EAAA,OAAAJ,EAAAhC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEUC,MAAK,cAAA1B,OAAeY,EAAKS,OAFnC,cAEFD,EAFEG,EAAAI,KAAAJ,EAAAE,KAAA,EAGWL,EAAIC,OAHf,OAGFA,EAHEE,EAAAI,KAKRjC,EAAMkC,SAASP,GALP,wBAAAE,EAAAM,SAAAV,MAAF,gBAAAW,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,YAAA,GAORC,WAAY,0CCZpB,IAAMxC,EAAQyC,sBAAY,CAIxBC,IAAK,uBAGLC,YAAY,IAGd3C,EAAM4C,UAEN,IAAMC,EAAQ,CAAI3D,GAAJoB,OAAAZ,OAAAoD,EAAA,EAAApD,CAAyBqD,qBAE1BC,EAAM,WACjB,OACE1D,EAAAC,EAAAC,cAACyD,EAAA,iBAAD,KACE3D,EAAAC,EAAAC,cAACyD,EAAA,cAAD,KACE3D,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACEO,MAAOA,EACP6C,SAAUA,EACVK,eAAe,sBAGnB5D,EAAAC,EAAAC,cAACyD,EAAA,cAAD,KACE3D,EAAAC,EAAAC,cAAC2D,EAAA,QAAD,CAASnD,MAAOA,EAAOoD,uBAAqB,IAC5C9D,EAAAC,EAAAC,cAAC6D,EAAA,UAAD,CAAWrD,MAAOA,IAClBV,EAAAC,EAAAC,cAAC8D,EAAA,YAAD,CAAatD,MAAOA,OAM5BuD,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.199276f3.chunk.js","sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useInfiniteAPI } from 'polotno/utils/use-api';\n\nimport { SectionTab } from 'polotno/side-panel';\nimport MdPhotoLibrary from '@meronex/icons/md/MdPhotoLibrary';\n\nimport { ImagesGrid } from 'polotno/side-panel/images-grid';\n\nexport const TemplatesPanel = observer(({ store }) => {\n  // load data\n  const { data, isLoading } = useInfiniteAPI({\n    getAPI: ({ page }) => `templates/page${page}.json`,\n  });\n\n  return (\n    <div style={{ height: '100%' }}>\n      <ImagesGrid\n        shadowEnabled={false}\n        images={data?.map((data) => data.items).flat()}\n        getPreview={(item) => `/templates/${item.preview}`}\n        isLoading={isLoading}\n        onSelect={async (item) => {\n          // download selected json\n          const req = await fetch(`/templates/${item.json}`);\n          const json = await req.json();\n          // just inject it into store\n          store.loadJSON(json);\n        }}\n        rowsNumber={1}\n      />\n    </div>\n  );\n});\n\n// define the new custom section\nexport const TemplatesSection = {\n  name: 'custom-templates',\n  Tab: (props) => (\n    <SectionTab name=\"Custom templates\" {...props}>\n      <MdPhotoLibrary />\n    </SectionTab>\n  ),\n  // we need observer to update component automatically on any store changes\n  Panel: TemplatesPanel,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/popover2/lib/css/blueprint-popover2.css';\n\nimport { PolotnoContainer, SidePanelWrap, WorkspaceWrap } from 'polotno';\nimport { Workspace } from 'polotno/canvas/workspace';\nimport { SidePanel } from 'polotno/side-panel';\nimport { Toolbar } from 'polotno/toolbar/toolbar';\nimport { ZoomButtons } from 'polotno/toolbar/zoom-buttons';\nimport { createStore } from 'polotno/model/store';\n\nimport { DEFAULT_SECTIONS } from 'polotno/side-panel';\nimport { TemplatesSection } from './templates-panel';\n\nconst store = createStore({\n  // this is a demo key just for that project\n  // (!) please don't use it in your projects\n  // to create your own API key please go here: https://polotno.com/cabinet\n  key: 'nFA5H9elEytDyPyvKL7T',\n  // you can hide back-link on a paid licence\n  // but it will be good if you can keep it for Polotno project support\n  showCredit: true,\n});\n\nstore.addPage();\n\nconst sections = [TemplatesSection, ...DEFAULT_SECTIONS];\n\nexport const App = () => {\n  return (\n    <PolotnoContainer>\n      <SidePanelWrap>\n        <SidePanel\n          store={store}\n          sections={sections}\n          defaultSection=\"custom-templates\"\n        />\n      </SidePanelWrap>\n      <WorkspaceWrap>\n        <Toolbar store={store} downloadButtonEnabled />\n        <Workspace store={store} />\n        <ZoomButtons store={store} />\n      </WorkspaceWrap>\n    </PolotnoContainer>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}